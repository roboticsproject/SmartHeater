
NucleoSTM32H745Demo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800466c  0800466c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800466c  0800466c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800466c  0800466c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  08004674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  24000018  0800468c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400014c  0800468c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bc6  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209e  00000000  00000000  00034c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00036cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00037780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000381a8  00000000  00000000  00038198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5aa  00000000  00000000  00070340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177f54  00000000  00000000  0007b8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f383e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d08  00000000  00000000  001f3894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080045e8 	.word	0x080045e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	080045e8 	.word	0x080045e8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_1 */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 fade 	bl	80009d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f83c 	bl	8000490 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f000 f966 	bl	80006e8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800041c:	f000 f8b4 	bl	8000588 <MX_FDCAN1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Start the Transmission process */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000420:	2102      	movs	r1, #2
 8000422:	4814      	ldr	r0, [pc, #80]	; (8000474 <main+0x68>)
 8000424:	f002 f84d 	bl	80024c2 <HAL_GPIO_TogglePin>
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8000428:	4a13      	ldr	r2, [pc, #76]	; (8000478 <main+0x6c>)
 800042a:	4914      	ldr	r1, [pc, #80]	; (800047c <main+0x70>)
 800042c:	4814      	ldr	r0, [pc, #80]	; (8000480 <main+0x74>)
 800042e:	f000 ff24 	bl	800127a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <main+0x30>
    {
      /* Transmission request Error */
      Error_Handler();
 8000438:	f000 f9dc 	bl	80007f4 <Error_Handler>
    }

	/* Start the Reception process */
	/* Retrieve Rx messages from RX FIFO0 */
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <main+0x78>)
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <main+0x7c>)
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	480f      	ldr	r0, [pc, #60]	; (8000480 <main+0x74>)
 8000444:	f000 ff74 	bl	8001330 <HAL_FDCAN_GetRxMessage>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d10c      	bne.n	8000468 <main+0x5c>
	{
		//if ((RxHeader.Identifier == 0x255) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_8))
		if(RxHeader.Identifier == 0x255)
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <main+0x7c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f240 2255 	movw	r2, #597	; 0x255
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <main+0x5c>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800045a:	2101      	movs	r1, #1
 800045c:	480b      	ldr	r0, [pc, #44]	; (800048c <main+0x80>)
 800045e:	f002 f830 	bl	80024c2 <HAL_GPIO_TogglePin>
			RxHeader.DataLength = FDCAN_DLC_BYTES_0;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <main+0x7c>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
	else
	{
		/* Reception Error */
	}

	HAL_Delay(500);
 8000468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800046c:	f000 fb42 	bl	8000af4 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000470:	e7d6      	b.n	8000420 <main+0x14>
 8000472:	bf00      	nop
 8000474:	58021000 	.word	0x58021000
 8000478:	24000008 	.word	0x24000008
 800047c:	240000fc 	.word	0x240000fc
 8000480:	24000054 	.word	0x24000054
 8000484:	240000f4 	.word	0x240000f4
 8000488:	24000120 	.word	0x24000120
 800048c:	58020400 	.word	0x58020400

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b09c      	sub	sp, #112	; 0x70
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049a:	224c      	movs	r2, #76	; 0x4c
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f004 f89a 	bl	80045d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2220      	movs	r2, #32
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 f894 	bl	80045d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004b0:	2004      	movs	r0, #4
 80004b2:	f002 f821 	bl	80024f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004b6:	2300      	movs	r3, #0
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	4b31      	ldr	r3, [pc, #196]	; (8000580 <SystemClock_Config+0xf0>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004be:	4a30      	ldr	r2, [pc, #192]	; (8000580 <SystemClock_Config+0xf0>)
 80004c0:	f023 0301 	bic.w	r3, r3, #1
 80004c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004c6:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <SystemClock_Config+0xf0>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <SystemClock_Config+0xf4>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004d8:	4a2a      	ldr	r2, [pc, #168]	; (8000584 <SystemClock_Config+0xf4>)
 80004da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <SystemClock_Config+0xf4>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004ec:	bf00      	nop
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <SystemClock_Config+0xf4>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004fa:	d1f8      	bne.n	80004ee <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000504:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	2302      	movs	r3, #2
 8000508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800050a:	2302      	movs	r3, #2
 800050c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800050e:	2301      	movs	r3, #1
 8000510:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000512:	2314      	movs	r3, #20
 8000514:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000516:	2302      	movs	r3, #2
 8000518:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800051a:	2304      	movs	r3, #4
 800051c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800051e:	2302      	movs	r3, #2
 8000520:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000522:	230c      	movs	r3, #12
 8000524:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000526:	2302      	movs	r3, #2
 8000528:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000532:	4618      	mov	r0, r3
 8000534:	f002 f83a 	bl	80025ac <HAL_RCC_OscConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800053e:	f000 f959 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	233f      	movs	r3, #63	; 0x3f
 8000544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000546:	2303      	movs	r3, #3
 8000548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000556:	2340      	movs	r3, #64	; 0x40
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fc30 	bl	8002dcc <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000572:	f000 f93f 	bl	80007f4 <Error_Handler>
  }
}
 8000576:	bf00      	nop
 8000578:	3770      	adds	r7, #112	; 0x70
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	58000400 	.word	0x58000400
 8000584:	58024800 	.word	0x58024800

08000588 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_Init 0 */
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800058c:	4b52      	ldr	r3, [pc, #328]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 800058e:	4a53      	ldr	r2, [pc, #332]	; (80006dc <MX_FDCAN1_Init+0x154>)
 8000590:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000592:	4b51      	ldr	r3, [pc, #324]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000598:	4b4f      	ldr	r3, [pc, #316]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800059e:	4b4e      	ldr	r3, [pc, #312]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005a4:	4b4c      	ldr	r3, [pc, #304]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 0x1;
 80005b0:	4b49      	ldr	r3, [pc, #292]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 0x8;
 80005b6:	4b48      	ldr	r3, [pc, #288]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005b8:	2208      	movs	r2, #8
 80005ba:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 80005bc:	4b46      	ldr	r3, [pc, #280]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005be:	221f      	movs	r2, #31
 80005c0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 0x8;
 80005c2:	4b45      	ldr	r3, [pc, #276]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005c4:	2208      	movs	r2, #8
 80005c6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80005c8:	4b43      	ldr	r3, [pc, #268]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005ce:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80005d4:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80005da:	4b3f      	ldr	r3, [pc, #252]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005dc:	2201      	movs	r2, #1
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80005e6:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005ec:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80005f2:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000600:	2200      	movs	r2, #0
 8000602:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000606:	2204      	movs	r2, #4
 8000608:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800060a:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 800060c:	2200      	movs	r2, #0
 800060e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000612:	2204      	movs	r2, #4
 8000614:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000616:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000618:	2200      	movs	r2, #0
 800061a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 800061e:	2200      	movs	r2, #0
 8000620:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000624:	2201      	movs	r2, #1
 8000626:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 800062a:	2200      	movs	r2, #0
 800062c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800062e:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000630:	2204      	movs	r2, #4
 8000632:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000634:	4828      	ldr	r0, [pc, #160]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000636:	f000 fb9d 	bl	8000d74 <HAL_FDCAN_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000640:	f000 f8d8 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
/* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_FDCAN1_Init+0x158>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_FDCAN1_Init+0x158>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <MX_FDCAN1_Init+0x158>)
 8000652:	2202      	movs	r2, #2
 8000654:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <MX_FDCAN1_Init+0x158>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x321;
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_FDCAN1_Init+0x158>)
 800065e:	f240 3221 	movw	r2, #801	; 0x321
 8000662:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_FDCAN1_Init+0x158>)
 8000666:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800066c:	491c      	ldr	r1, [pc, #112]	; (80006e0 <MX_FDCAN1_Init+0x158>)
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000670:	f000 fd62 	bl	8001138 <HAL_FDCAN_ConfigFilter>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_FDCAN1_Init+0xf6>
  {
    /* Filter configuration Error */
    Error_Handler();
 800067a:	f000 f8bb 	bl	80007f4 <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000680:	f000 fdd0 	bl	8001224 <HAL_FDCAN_Start>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00b      	beq.n	80006a2 <MX_FDCAN1_Init+0x11a>
    /* Start Error */

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800068a:	2200      	movs	r2, #0
 800068c:	2101      	movs	r1, #1
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <MX_FDCAN1_Init+0x150>)
 8000690:	f000 ffbc 	bl	800160c <HAL_FDCAN_ActivateNotification>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <MX_FDCAN1_Init+0x11a>
    /* Notification Error */

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x321;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 800069c:	f240 3221 	movw	r2, #801	; 0x321
 80006a0:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 80006b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006b4:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_FDCAN1_Init+0x15c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	24000054 	.word	0x24000054
 80006dc:	4000a000 	.word	0x4000a000
 80006e0:	24000034 	.word	0x24000034
 80006e4:	240000fc 	.word	0x240000fc

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	4a38      	ldr	r2, [pc, #224]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_GPIO_Init+0x100>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_GPIO_Init+0x100>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_GPIO_Init+0x100>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_GPIO_Init+0x100>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 0302 	and.w	r3, r3, #2
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0x100>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_GPIO_Init+0x100>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	4a1a      	ldr	r2, [pc, #104]	; (80007e8 <MX_GPIO_Init+0x100>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	f003 0310 	and.w	r3, r3, #16
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2101      	movs	r1, #1
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <MX_GPIO_Init+0x104>)
 800079a:	f001 fe79 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2102      	movs	r1, #2
 80007a2:	4813      	ldr	r0, [pc, #76]	; (80007f0 <MX_GPIO_Init+0x108>)
 80007a4:	f001 fe74 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0x104>)
 80007c0:	f001 fcb6 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_GPIO_Init+0x108>)
 80007dc:	f001 fca8 	bl	8002130 <HAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020400 	.word	0x58020400
 80007f0:	58021000 	.word	0x58021000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_MspInit+0x30>)
 800080c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x30>)
 8000812:	f043 0302 	orr.w	r3, r3, #2
 8000816:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x30>)
 800081c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	58024400 	.word	0x58024400

08000838 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b0b8      	sub	sp, #224	; 0xe0
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	22bc      	movs	r2, #188	; 0xbc
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f003 febd 	bl	80045d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a29      	ldr	r2, [pc, #164]	; (8000908 <HAL_FDCAN_MspInit+0xd0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d14a      	bne.n	80008fe <HAL_FDCAN_MspInit+0xc6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800086c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800086e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000872:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fdd7 	bl	800342c <HAL_RCCEx_PeriphCLKConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000884:	f7ff ffb6 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_FDCAN_MspInit+0xd4>)
 800088a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800088e:	4a1f      	ldr	r2, [pc, #124]	; (800090c <HAL_FDCAN_MspInit+0xd4>)
 8000890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000894:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_FDCAN_MspInit+0xd4>)
 800089a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800089e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_FDCAN_MspInit+0xd4>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_FDCAN_MspInit+0xd4>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_FDCAN_MspInit+0xd4>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008c4:	2303      	movs	r3, #3
 80008c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008dc:	2309      	movs	r3, #9
 80008de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008e6:	4619      	mov	r1, r3
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_FDCAN_MspInit+0xd8>)
 80008ea:	f001 fc21 	bl	8002130 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2013      	movs	r0, #19
 80008f4:	f000 fa09 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008f8:	2013      	movs	r0, #19
 80008fa:	f000 fa20 	bl	8000d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	37e0      	adds	r7, #224	; 0xe0
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	4000a000 	.word	0x4000a000
 800090c:	58024400 	.word	0x58024400
 8000910:	58020c00 	.word	0x58020c00

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f8a8 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <FDCAN1_IT0_IRQHandler+0x10>)
 800096e:	f000 fec7 	bl	8001700 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000054 	.word	0x24000054

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000980:	f7ff fcaa 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 fde3 	bl	8004574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fd2d 	bl	800040c <main>
  bx  lr
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80009b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009bc:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 80009c0:	08004674 	.word	0x08004674
  ldr r2, =_sbss
 80009c4:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 80009c8:	2400014c 	.word	0x2400014c

080009cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC3_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 f98c 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009dc:	f002 fbac 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80009e0:	4602      	mov	r2, r0
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_Init+0x68>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	f003 030f 	and.w	r3, r3, #15
 80009ec:	4913      	ldr	r1, [pc, #76]	; (8000a3c <HAL_Init+0x6c>)
 80009ee:	5ccb      	ldrb	r3, [r1, r3]
 80009f0:	f003 031f 	and.w	r3, r3, #31
 80009f4:	fa22 f303 	lsr.w	r3, r2, r3
 80009f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_Init+0x68>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_Init+0x6c>)
 8000a04:	5cd3      	ldrb	r3, [r2, r3]
 8000a06:	f003 031f 	and.w	r3, r3, #31
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <HAL_Init+0x70>)
 8000a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <HAL_Init+0x74>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f814 	bl	8000a48 <HAL_InitTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e002      	b.n	8000a30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2a:	f7ff feeb 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	0800464c 	.word	0x0800464c
 8000a40:	24000004 	.word	0x24000004
 8000a44:	24000000 	.word	0x24000000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_InitTick+0x60>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e021      	b.n	8000aa0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_InitTick+0x64>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_InitTick+0x60>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f971 	bl	8000d5a <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f93b 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x68>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000014 	.word	0x24000014
 8000aac:	24000000 	.word	0x24000000
 8000ab0:	24000010 	.word	0x24000010

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	24000014 	.word	0x24000014
 8000ad8:	24000148 	.word	0x24000148

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	24000148 	.word	0x24000148

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	24000014 	.word	0x24000014

08000b3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetREVID+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	0c1b      	lsrs	r3, r3, #16
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	5c001000 	.word	0x5c001000

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <__NVIC_SetPriorityGrouping+0x40>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x40>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00
 8000b98:	05fa0000 	.word	0x05fa0000

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff29 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff40 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff90 	bl	8000c48 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5f 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff33 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffa4 	bl	8000cb0 <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b098      	sub	sp, #96	; 0x60
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000d7c:	4a84      	ldr	r2, [pc, #528]	; (8000f90 <HAL_FDCAN_Init+0x21c>)
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4611      	mov	r1, r2
 8000d84:	224c      	movs	r2, #76	; 0x4c
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fc18 	bl	80045bc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e1ca      	b.n	800112c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a7e      	ldr	r2, [pc, #504]	; (8000f94 <HAL_FDCAN_Init+0x220>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d106      	bne.n	8000dae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000da8:	461a      	mov	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d106      	bne.n	8000dc8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fd38 	bl	8000838 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0210 	bic.w	r2, r2, #16
 8000dd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff fe80 	bl	8000adc <HAL_GetTick>
 8000ddc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dde:	e014      	b.n	8000e0a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000de0:	f7ff fe7c 	bl	8000adc <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b0a      	cmp	r3, #10
 8000dec:	d90d      	bls.n	8000e0a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000df4:	f043 0201 	orr.w	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e190      	b.n	800112c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d0e3      	beq.n	8000de0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0201 	orr.w	r2, r2, #1
 8000e26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e28:	f7ff fe58 	bl	8000adc <HAL_GetTick>
 8000e2c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e2e:	e014      	b.n	8000e5a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e30:	f7ff fe54 	bl	8000adc <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	d90d      	bls.n	8000e5a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e44:	f043 0201 	orr.w	r2, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e168      	b.n	800112c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0e3      	beq.n	8000e30 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0202 	orr.w	r2, r2, #2
 8000e76:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7c1b      	ldrb	r3, [r3, #16]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d108      	bne.n	8000e92 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e8e:	619a      	str	r2, [r3, #24]
 8000e90:	e007      	b.n	8000ea2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	699a      	ldr	r2, [r3, #24]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ea0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7c5b      	ldrb	r3, [r3, #17]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d108      	bne.n	8000ebc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	699a      	ldr	r2, [r3, #24]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000eb8:	619a      	str	r2, [r3, #24]
 8000eba:	e007      	b.n	8000ecc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000eca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7c9b      	ldrb	r3, [r3, #18]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d108      	bne.n	8000ee6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	e007      	b.n	8000ef6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ef4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	699a      	ldr	r2, [r3, #24]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f1a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0210 	bic.w	r2, r2, #16
 8000f2a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0204 	orr.w	r2, r2, #4
 8000f42:	619a      	str	r2, [r3, #24]
 8000f44:	e030      	b.n	8000fa8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d02c      	beq.n	8000fa8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d020      	beq.n	8000f98 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	699a      	ldr	r2, [r3, #24]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f64:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0210 	orr.w	r2, r2, #16
 8000f74:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d114      	bne.n	8000fa8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	699a      	ldr	r2, [r3, #24]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0220 	orr.w	r2, r2, #32
 8000f8c:	619a      	str	r2, [r3, #24]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_FDCAN_Init+0x234>
 8000f90:	08004600 	.word	0x08004600
 8000f94:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	699a      	ldr	r2, [r3, #24]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0220 	orr.w	r2, r2, #32
 8000fa6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fb8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fc0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fd0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fd2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fdc:	d115      	bne.n	800100a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000ff6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	3b01      	subs	r3, #1
 8001000:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001006:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001008:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00a      	beq.n	8001028 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001030:	4413      	add	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d012      	beq.n	800105c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800103e:	f023 0107 	bic.w	r1, r3, #7
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800104c:	4413      	add	r3, r2
 800104e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	2b00      	cmp	r3, #0
 8001062:	d012      	beq.n	800108a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800106c:	f023 0107 	bic.w	r1, r3, #7
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800107a:	4413      	add	r3, r2
 800107c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	2b00      	cmp	r3, #0
 8001090:	d013      	beq.n	80010ba <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800109a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010a8:	4413      	add	r3, r2
 80010aa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010ae:	011a      	lsls	r2, r3, #4
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d013      	beq.n	80010ea <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010ca:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010d8:	4413      	add	r3, r2
 80010da:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010de:	021a      	lsls	r2, r3, #8
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_FDCAN_Init+0x3c0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d107      	bne.n	8001104 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f022 0203 	bic.w	r2, r2, #3
 8001102:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fe03 	bl	8001d28 <FDCAN_CalcultateRamBlockAddresses>
 8001122:	4603      	mov	r3, r0
 8001124:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001128:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800112c:	4618      	mov	r0, r3
 800112e:	3760      	adds	r7, #96	; 0x60
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	4000a000 	.word	0x4000a000

08001138 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001148:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d002      	beq.n	8001156 <HAL_FDCAN_ConfigFilter+0x1e>
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d157      	bne.n	8001206 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d12b      	bne.n	80011b6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d10d      	bne.n	8001182 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001172:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001178:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800117a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00e      	b.n	80011a0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800118e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001196:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e025      	b.n	8001202 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	075a      	lsls	r2, r3, #29
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	d103      	bne.n	80011d4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	e006      	b.n	80011e2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	079a      	lsls	r2, r3, #30
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3304      	adds	r3, #4
 80011fa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e008      	b.n	8001218 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800120c:	f043 0202 	orr.w	r2, r3, #2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
  }
}
 8001218:	4618      	mov	r0, r3
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d111      	bne.n	800125c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	e008      	b.n	800126e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001262:	f043 0204 	orr.w	r2, r3, #4
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
  }
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d141      	bne.n	8001316 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800129a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012a8:	f043 0220 	orr.w	r2, r3, #32
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e038      	b.n	8001328 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e026      	b.n	8001328 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012e2:	0c1b      	lsrs	r3, r3, #16
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 fe9f 	bl	8002034 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e008      	b.n	8001328 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800131c:	f043 0208 	orr.w	r2, r3, #8
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
  }
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001330:	b480      	push	{r7}
 8001332:	b08b      	sub	sp, #44	; 0x2c
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001348:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800134a:	7efb      	ldrb	r3, [r7, #27]
 800134c:	2b02      	cmp	r3, #2
 800134e:	f040 814b 	bne.w	80015e8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b40      	cmp	r3, #64	; 0x40
 8001356:	d14d      	bne.n	80013f4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001360:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800136e:	f043 0220 	orr.w	r2, r3, #32
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e13e      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001392:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e12c      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013a8:	0e1b      	lsrs	r3, r3, #24
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10b      	bne.n	80013ca <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013ba:	0fdb      	lsrs	r3, r3, #31
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013c4:	d101      	bne.n	80013ca <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	69f9      	ldr	r1, [r7, #28]
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	e069      	b.n	80014c8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b41      	cmp	r3, #65	; 0x41
 80013f8:	d14d      	bne.n	8001496 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001402:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0ed      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001434:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0db      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800144a:	0e1b      	lsrs	r3, r3, #24
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10b      	bne.n	800146c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800145c:	0fdb      	lsrs	r3, r3, #31
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001466:	d101      	bne.n	800146c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001468:	2301      	movs	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	69f9      	ldr	r1, [r7, #28]
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	e018      	b.n	80014c8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	429a      	cmp	r2, r3
 800149e:	d309      	bcc.n	80014b4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014a6:	f043 0220 	orr.w	r2, r3, #32
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0a2      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	fb01 f303 	mul.w	r3, r1, r3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e005      	b.n	80014f8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	3304      	adds	r3, #4
 8001514:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0e1b      	lsrs	r3, r3, #24
 800154a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0fda      	lsrs	r2, r3, #31
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	3304      	adds	r3, #4
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	e00a      	b.n	8001582 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	441a      	add	r2, r3
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	440b      	add	r3, r1
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	3301      	adds	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	461a      	mov	r2, r3
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	4293      	cmp	r3, r2
 8001592:	d3eb      	bcc.n	800156c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b40      	cmp	r3, #64	; 0x40
 8001598:	d105      	bne.n	80015a6 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80015a4:	e01e      	b.n	80015e4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b41      	cmp	r3, #65	; 0x41
 80015aa:	d105      	bne.n	80015b8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80015b6:	e015      	b.n	80015e4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	d808      	bhi.n	80015d0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2101      	movs	r1, #1
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80015ce:	e009      	b.n	80015e4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f003 021f 	and.w	r2, r3, #31
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e008      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ee:	f043 0208 	orr.w	r2, r3, #8
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
  }
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	372c      	adds	r7, #44	; 0x2c
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	0800465c 	.word	0x0800465c

0800160c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800161e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d002      	beq.n	800162c <HAL_FDCAN_ActivateNotification+0x20>
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d155      	bne.n	80016d8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d108      	bne.n	800164c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c
 800164a:	e014      	b.n	8001676 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4013      	ands	r3, r2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	429a      	cmp	r2, r3
 800165a:	d108      	bne.n	800166e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0202 	orr.w	r2, r2, #2
 800166a:	65da      	str	r2, [r3, #92]	; 0x5c
 800166c:	e003      	b.n	8001676 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2203      	movs	r2, #3
 8001674:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	430a      	orrs	r2, r1
 8001690:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_FDCAN_ActivateNotification+0xec>)
 80016bc:	4013      	ands	r3, r2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	430b      	orrs	r3, r1
 80016c4:	6553      	str	r3, [r2, #84]	; 0x54
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0f9b      	lsrs	r3, r3, #30
 80016ce:	490b      	ldr	r1, [pc, #44]	; (80016fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e008      	b.n	80016ea <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016de:	f043 0202 	orr.w	r2, r3, #2
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
  }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	3fcfffff 	.word	0x3fcfffff
 80016fc:	4000a800 	.word	0x4000a800

08001700 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b092      	sub	sp, #72	; 0x48
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001708:	4b90      	ldr	r3, [pc, #576]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	079b      	lsls	r3, r3, #30
 800170e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001710:	4b8e      	ldr	r3, [pc, #568]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	079b      	lsls	r3, r3, #30
 8001716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001718:	4013      	ands	r3, r2
 800171a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001722:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001726:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001730:	4013      	ands	r3, r2
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001748:	4013      	ands	r3, r2
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001756:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001760:	4013      	ands	r3, r2
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001778:	4013      	ands	r3, r2
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001790:	4013      	ands	r3, r2
 8001792:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d011      	beq.n	80017c6 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00a      	beq.n	80017c6 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b8:	651a      	str	r2, [r3, #80]	; 0x50
 80017ba:	4b64      	ldr	r3, [pc, #400]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fa65 	bl	8001c90 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01e      	beq.n	8001812 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d017      	beq.n	8001812 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	4013      	ands	r3, r2
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001802:	651a      	str	r2, [r3, #80]	; 0x50
 8001804:	4b51      	ldr	r3, [pc, #324]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800180a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fa16 	bl	8001c3e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800181e:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <HAL_FDCAN_IRQHandler+0x250>)
 8001820:	400b      	ands	r3, r1
 8001822:	6513      	str	r3, [r2, #80]	; 0x50
 8001824:	4a49      	ldr	r2, [pc, #292]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 8001826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001828:	0f9b      	lsrs	r3, r3, #30
 800182a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800182c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f9c4 	bl	8001bbc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00d      	beq.n	8001856 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_FDCAN_IRQHandler+0x250>)
 8001842:	400b      	ands	r3, r1
 8001844:	6513      	str	r3, [r2, #80]	; 0x50
 8001846:	4a41      	ldr	r2, [pc, #260]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 8001848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800184a:	0f9b      	lsrs	r3, r3, #30
 800184c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800184e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f9be 	bl	8001bd2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_FDCAN_IRQHandler+0x250>)
 8001864:	400b      	ands	r3, r1
 8001866:	6513      	str	r3, [r2, #80]	; 0x50
 8001868:	4a38      	ldr	r2, [pc, #224]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 800186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186c:	0f9b      	lsrs	r3, r3, #30
 800186e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f9b8 	bl	8001be8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_FDCAN_IRQHandler+0x250>)
 8001886:	400b      	ands	r3, r1
 8001888:	6513      	str	r3, [r2, #80]	; 0x50
 800188a:	4a30      	ldr	r2, [pc, #192]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 800188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800188e:	0f9b      	lsrs	r3, r3, #30
 8001890:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f9b2 	bl	8001bfe <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d011      	beq.n	80018cc <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00a      	beq.n	80018cc <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018be:	651a      	str	r2, [r3, #80]	; 0x50
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f9a4 	bl	8001c14 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01e      	beq.n	8001918 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d017      	beq.n	8001918 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018fc:	4013      	ands	r3, r2
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001908:	651a      	str	r2, [r3, #80]	; 0x50
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f988 	bl	8001c28 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d016      	beq.n	8001954 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00f      	beq.n	8001954 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800193c:	651a      	str	r2, [r3, #80]	; 0x50
 800193e:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_FDCAN_IRQHandler+0x24c>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f985 	bl	8001c54 <HAL_FDCAN_RxBufferNewMessageCallback>
 800194a:	e003      	b.n	8001954 <HAL_FDCAN_IRQHandler+0x254>
 800194c:	4000a800 	.word	0x4000a800
 8001950:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d011      	beq.n	8001986 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00a      	beq.n	8001986 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001978:	651a      	str	r2, [r3, #80]	; 0x50
 800197a:	4b8d      	ldr	r3, [pc, #564]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f971 	bl	8001c68 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d011      	beq.n	80019b8 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019aa:	651a      	str	r2, [r3, #80]	; 0x50
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f962 	bl	8001c7c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00f      	beq.n	80019f4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019dc:	651a      	str	r2, [r3, #80]	; 0x50
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a00:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a02:	400b      	ands	r3, r1
 8001a04:	6513      	str	r3, [r2, #80]	; 0x50
 8001a06:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0a:	0f9b      	lsrs	r3, r3, #30
 8001a0c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f951 	bl	8001cb8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d011      	beq.n	8001a40 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a22:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a24:	400b      	ands	r3, r1
 8001a26:	6513      	str	r3, [r2, #80]	; 0x50
 8001a28:	4a61      	ldr	r2, [pc, #388]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2c:	0f9b      	lsrs	r3, r3, #30
 8001a2e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5c      	ldr	r2, [pc, #368]	; (8001bb8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	f040 80a6 	bne.w	8001b98 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 809e 	beq.w	8001b98 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a70:	4013      	ands	r3, r2
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a7e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	6a3a      	ldr	r2, [r7, #32]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a96:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001aae:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001ac6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f8f2 	bl	8001cce <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001af8:	6a39      	ldr	r1, [r7, #32]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8f2 	bl	8001ce4 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01b      	beq.n	8001b46 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d014      	beq.n	8001b46 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	0c1b      	lsrs	r3, r3, #16
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b32:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6939      	ldr	r1, [r7, #16]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8da 	bl	8001cfa <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001b54:	69f9      	ldr	r1, [r7, #28]
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8db 	bl	8001d12 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00b      	beq.n	8001b98 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f87e 	bl	8001ca4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3748      	adds	r7, #72	; 0x48
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	4000a800 	.word	0x4000a800
 8001bb4:	3fcfffff 	.word	0x3fcfffff
 8001bb8:	4000a000 	.word	0x4000a000

08001bbc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d3e:	4ba7      	ldr	r3, [pc, #668]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	0091      	lsls	r1, r2, #2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d58:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	4413      	add	r3, r2
 8001d74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d7e:	4b97      	ldr	r3, [pc, #604]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	0091      	lsls	r1, r2, #2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d98:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4413      	add	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001dc0:	4b86      	ldr	r3, [pc, #536]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	0091      	lsls	r1, r2, #2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001dda:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e08:	4b74      	ldr	r3, [pc, #464]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	0091      	lsls	r1, r2, #2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e50:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	0091      	lsls	r1, r2, #2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4413      	add	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	0091      	lsls	r1, r2, #2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e96:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	041a      	lsls	r2, r3, #16
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	0091      	lsls	r1, r2, #2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ed8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ef4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efc:	061a      	lsls	r2, r3, #24
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0c:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	441a      	add	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	441a      	add	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d915      	bls.n	8002004 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001fd8:	e006      	b.n	8001fe8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001fda:	bf00      	nop
 8001fdc:	ffff0003 	.word	0xffff0003
 8001fe0:	10002b00 	.word	0x10002b00
 8001fe4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e010      	b.n	8002026 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e005      	b.n	8002018 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3f3      	bcc.n	800200c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002052:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800205a:	4313      	orrs	r3, r2
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e00a      	b.n	8002076 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002068:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800206e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002074:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002080:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002086:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800208c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	3304      	adds	r3, #4
 80020b6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	3304      	adds	r3, #4
 80020c2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e020      	b.n	800210c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3303      	adds	r3, #3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3302      	adds	r3, #2
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	440b      	add	r3, r1
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020e2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	440b      	add	r3, r1
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020f0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	440a      	add	r2, r1
 80020f8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020fa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	3304      	adds	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3304      	adds	r3, #4
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	4a06      	ldr	r2, [pc, #24]	; (800212c <FDCAN_CopyMessageToRAM+0xf8>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	461a      	mov	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	4293      	cmp	r3, r2
 800211c:	d3d5      	bcc.n	80020ca <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	3724      	adds	r7, #36	; 0x24
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	0800465c 	.word	0x0800465c

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800213e:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_GPIO_Init+0x234>)
 8002140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002142:	e194      	b.n	800246e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8186 	beq.w	8002468 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d00b      	beq.n	800217c <HAL_GPIO_Init+0x4c>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d007      	beq.n	800217c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002170:	2b11      	cmp	r3, #17
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b12      	cmp	r3, #18
 800217a:	d130      	bne.n	80021de <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021b2:	2201      	movs	r2, #1
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f003 0201 	and.w	r2, r3, #1
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0xee>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b12      	cmp	r3, #18
 800221c:	d123      	bne.n	8002266 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	69b9      	ldr	r1, [r7, #24]
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80e0 	beq.w	8002468 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_GPIO_Init+0x238>)
 80022aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022ae:	4a2e      	ldr	r2, [pc, #184]	; (8002368 <HAL_GPIO_Init+0x238>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_GPIO_Init+0x238>)
 80022ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c6:	4a29      	ldr	r2, [pc, #164]	; (800236c <HAL_GPIO_Init+0x23c>)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	3302      	adds	r3, #2
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a20      	ldr	r2, [pc, #128]	; (8002370 <HAL_GPIO_Init+0x240>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d052      	beq.n	8002398 <HAL_GPIO_Init+0x268>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <HAL_GPIO_Init+0x244>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d031      	beq.n	800235e <HAL_GPIO_Init+0x22e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <HAL_GPIO_Init+0x248>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02b      	beq.n	800235a <HAL_GPIO_Init+0x22a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_GPIO_Init+0x24c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d025      	beq.n	8002356 <HAL_GPIO_Init+0x226>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_GPIO_Init+0x250>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_GPIO_Init+0x222>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_GPIO_Init+0x254>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x21e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_GPIO_Init+0x258>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x21a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_GPIO_Init+0x25c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x216>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_GPIO_Init+0x260>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x212>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a17      	ldr	r2, [pc, #92]	; (8002394 <HAL_GPIO_Init+0x264>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x20e>
 800233a:	2309      	movs	r3, #9
 800233c:	e02d      	b.n	800239a <HAL_GPIO_Init+0x26a>
 800233e:	230a      	movs	r3, #10
 8002340:	e02b      	b.n	800239a <HAL_GPIO_Init+0x26a>
 8002342:	2308      	movs	r3, #8
 8002344:	e029      	b.n	800239a <HAL_GPIO_Init+0x26a>
 8002346:	2307      	movs	r3, #7
 8002348:	e027      	b.n	800239a <HAL_GPIO_Init+0x26a>
 800234a:	2306      	movs	r3, #6
 800234c:	e025      	b.n	800239a <HAL_GPIO_Init+0x26a>
 800234e:	2305      	movs	r3, #5
 8002350:	e023      	b.n	800239a <HAL_GPIO_Init+0x26a>
 8002352:	2304      	movs	r3, #4
 8002354:	e021      	b.n	800239a <HAL_GPIO_Init+0x26a>
 8002356:	2303      	movs	r3, #3
 8002358:	e01f      	b.n	800239a <HAL_GPIO_Init+0x26a>
 800235a:	2302      	movs	r3, #2
 800235c:	e01d      	b.n	800239a <HAL_GPIO_Init+0x26a>
 800235e:	2301      	movs	r3, #1
 8002360:	e01b      	b.n	800239a <HAL_GPIO_Init+0x26a>
 8002362:	bf00      	nop
 8002364:	58000080 	.word	0x58000080
 8002368:	58024400 	.word	0x58024400
 800236c:	58000400 	.word	0x58000400
 8002370:	58020000 	.word	0x58020000
 8002374:	58020400 	.word	0x58020400
 8002378:	58020800 	.word	0x58020800
 800237c:	58020c00 	.word	0x58020c00
 8002380:	58021000 	.word	0x58021000
 8002384:	58021400 	.word	0x58021400
 8002388:	58021800 	.word	0x58021800
 800238c:	58021c00 	.word	0x58021c00
 8002390:	58022000 	.word	0x58022000
 8002394:	58022400 	.word	0x58022400
 8002398:	2300      	movs	r3, #0
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023aa:	4938      	ldr	r1, [pc, #224]	; (800248c <HAL_GPIO_Init+0x35c>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3301      	adds	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f ae63 	bne.w	8002144 <HAL_GPIO_Init+0x14>
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3724      	adds	r7, #36	; 0x24
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	58000400 	.word	0x58000400

08002490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
 800249c:	4613      	mov	r3, r2
 800249e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024a0:	787b      	ldrb	r3, [r7, #1]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024ac:	e003      	b.n	80024b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	041a      	lsls	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b085      	sub	sp, #20
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	041a      	lsls	r2, r3, #16
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43d9      	mvns	r1, r3
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	400b      	ands	r3, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	2b06      	cmp	r3, #6
 800250a:	d00a      	beq.n	8002522 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800250c:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e040      	b.n	80025a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e03e      	b.n	80025a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800252a:	491f      	ldr	r1, [pc, #124]	; (80025a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002532:	f7fe fad3 	bl	8000adc <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002538:	e009      	b.n	800254e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800253a:	f7fe facf 	bl	8000adc <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002548:	d901      	bls.n	800254e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e028      	b.n	80025a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255a:	d1ee      	bne.n	800253a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b1e      	cmp	r3, #30
 8002560:	d008      	beq.n	8002574 <HAL_PWREx_ConfigSupply+0x7c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b2e      	cmp	r3, #46	; 0x2e
 8002566:	d005      	beq.n	8002574 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b1d      	cmp	r3, #29
 800256c:	d002      	beq.n	8002574 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b2d      	cmp	r3, #45	; 0x2d
 8002572:	d114      	bne.n	800259e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002574:	f7fe fab2 	bl	8000adc <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800257a:	e009      	b.n	8002590 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800257c:	f7fe faae 	bl	8000adc <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800258a:	d901      	bls.n	8002590 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d1ee      	bne.n	800257c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	58024800 	.word	0x58024800

080025ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	; 0x30
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e3ff      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8087 	beq.w	80026da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025cc:	4b99      	ldr	r3, [pc, #612]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025d6:	4b97      	ldr	r3, [pc, #604]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d007      	beq.n	80025f2 <HAL_RCC_OscConfig+0x46>
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	2b18      	cmp	r3, #24
 80025e6:	d110      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f2:	4b90      	ldr	r3, [pc, #576]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d06c      	beq.n	80026d8 <HAL_RCC_OscConfig+0x12c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d168      	bne.n	80026d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e3d9      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x76>
 8002614:	4b87      	ldr	r3, [pc, #540]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a86      	ldr	r2, [pc, #536]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e02e      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x98>
 800262a:	4b82      	ldr	r3, [pc, #520]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a81      	ldr	r2, [pc, #516]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7e      	ldr	r2, [pc, #504]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800263c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e01d      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0xbc>
 800264e:	4b79      	ldr	r3, [pc, #484]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a78      	ldr	r2, [pc, #480]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b76      	ldr	r3, [pc, #472]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a75      	ldr	r2, [pc, #468]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002668:	4b72      	ldr	r3, [pc, #456]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a71      	ldr	r2, [pc, #452]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b6f      	ldr	r3, [pc, #444]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6e      	ldr	r2, [pc, #440]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fa28 	bl	8000adc <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fa24 	bl	8000adc <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e38d      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026a2:	4b64      	ldr	r3, [pc, #400]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0xe4>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fa14 	bl	8000adc <HAL_GetTick>
 80026b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fa10 	bl	8000adc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e379      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ca:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x10c>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80ae 	beq.w	8002844 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e8:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f2:	4b50      	ldr	r3, [pc, #320]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_RCC_OscConfig+0x162>
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	2b18      	cmp	r3, #24
 8002702:	d13a      	bne.n	800277a <HAL_RCC_OscConfig+0x1ce>
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d135      	bne.n	800277a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270e:	4b49      	ldr	r3, [pc, #292]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x17a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e34b      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	f7fe fa09 	bl	8000b3c <HAL_GetREVID>
 800272a:	4603      	mov	r3, r0
 800272c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002730:	4293      	cmp	r3, r2
 8002732:	d817      	bhi.n	8002764 <HAL_RCC_OscConfig+0x1b8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d108      	bne.n	800274e <HAL_RCC_OscConfig+0x1a2>
 800273c:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002744:	4a3b      	ldr	r2, [pc, #236]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274c:	e07a      	b.n	8002844 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	031b      	lsls	r3, r3, #12
 800275c:	4935      	ldr	r1, [pc, #212]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002762:	e06f      	b.n	8002844 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b33      	ldr	r3, [pc, #204]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	4930      	ldr	r1, [pc, #192]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	e064      	b.n	8002844 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d045      	beq.n	800280e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0219 	bic.w	r2, r3, #25
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4929      	ldr	r1, [pc, #164]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe f9a2 	bl	8000adc <HAL_GetTick>
 8002798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279c:	f7fe f99e 	bl	8000adc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e307      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ba:	f7fe f9bf 	bl	8000b3c <HAL_GetREVID>
 80027be:	4603      	mov	r3, r0
 80027c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d817      	bhi.n	80027f8 <HAL_RCC_OscConfig+0x24c>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d108      	bne.n	80027e2 <HAL_RCC_OscConfig+0x236>
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027d8:	4a16      	ldr	r2, [pc, #88]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027de:	6053      	str	r3, [r2, #4]
 80027e0:	e030      	b.n	8002844 <HAL_RCC_OscConfig+0x298>
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	031b      	lsls	r3, r3, #12
 80027f0:	4910      	ldr	r1, [pc, #64]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
 80027f6:	e025      	b.n	8002844 <HAL_RCC_OscConfig+0x298>
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	490b      	ldr	r1, [pc, #44]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e01a      	b.n	8002844 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a08      	ldr	r2, [pc, #32]	; (8002834 <HAL_RCC_OscConfig+0x288>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe f95f 	bl	8000adc <HAL_GetTick>
 800281e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe f95b 	bl	8000adc <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d903      	bls.n	8002838 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e2c4      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
 8002834:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002838:	4ba4      	ldr	r3, [pc, #656]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ee      	bne.n	8002822 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a9 	beq.w	80029a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002852:	4b9e      	ldr	r3, [pc, #632]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800285a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800285c:	4b9b      	ldr	r3, [pc, #620]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d007      	beq.n	8002878 <HAL_RCC_OscConfig+0x2cc>
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b18      	cmp	r3, #24
 800286c:	d13a      	bne.n	80028e4 <HAL_RCC_OscConfig+0x338>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d135      	bne.n	80028e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002878:	4b94      	ldr	r3, [pc, #592]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_OscConfig+0x2e4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d001      	beq.n	8002890 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e296      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002890:	f7fe f954 	bl	8000b3c <HAL_GetREVID>
 8002894:	4603      	mov	r3, r0
 8002896:	f241 0203 	movw	r2, #4099	; 0x1003
 800289a:	4293      	cmp	r3, r2
 800289c:	d817      	bhi.n	80028ce <HAL_RCC_OscConfig+0x322>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d108      	bne.n	80028b8 <HAL_RCC_OscConfig+0x30c>
 80028a6:	4b89      	ldr	r3, [pc, #548]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028ae:	4a87      	ldr	r2, [pc, #540]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80028b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028b6:	e075      	b.n	80029a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028b8:	4b84      	ldr	r3, [pc, #528]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	4981      	ldr	r1, [pc, #516]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028cc:	e06a      	b.n	80029a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ce:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	061b      	lsls	r3, r3, #24
 80028dc:	497b      	ldr	r1, [pc, #492]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e2:	e05f      	b.n	80029a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d042      	beq.n	8002972 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028ec:	4b77      	ldr	r3, [pc, #476]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a76      	ldr	r2, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80028f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe f8f0 	bl	8000adc <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002900:	f7fe f8ec 	bl	8000adc <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e255      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002912:	4b6e      	ldr	r3, [pc, #440]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800291e:	f7fe f90d 	bl	8000b3c <HAL_GetREVID>
 8002922:	4603      	mov	r3, r0
 8002924:	f241 0203 	movw	r2, #4099	; 0x1003
 8002928:	4293      	cmp	r3, r2
 800292a:	d817      	bhi.n	800295c <HAL_RCC_OscConfig+0x3b0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	2b20      	cmp	r3, #32
 8002932:	d108      	bne.n	8002946 <HAL_RCC_OscConfig+0x39a>
 8002934:	4b65      	ldr	r3, [pc, #404]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800293c:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 800293e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002942:	6053      	str	r3, [r2, #4]
 8002944:	e02e      	b.n	80029a4 <HAL_RCC_OscConfig+0x3f8>
 8002946:	4b61      	ldr	r3, [pc, #388]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	069b      	lsls	r3, r3, #26
 8002954:	495d      	ldr	r1, [pc, #372]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
 800295a:	e023      	b.n	80029a4 <HAL_RCC_OscConfig+0x3f8>
 800295c:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4958      	ldr	r1, [pc, #352]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 800296c:	4313      	orrs	r3, r2
 800296e:	60cb      	str	r3, [r1, #12]
 8002970:	e018      	b.n	80029a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002972:	4b56      	ldr	r3, [pc, #344]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a55      	ldr	r2, [pc, #340]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe f8ad 	bl	8000adc <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002986:	f7fe f8a9 	bl	8000adc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e212      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002998:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f0      	bne.n	8002986 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d036      	beq.n	8002a1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d019      	beq.n	80029ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b8:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	4a43      	ldr	r2, [pc, #268]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe f88a 	bl	8000adc <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029cc:	f7fe f886 	bl	8000adc <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1ef      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80029e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x420>
 80029ea:	e018      	b.n	8002a1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ec:	4b37      	ldr	r3, [pc, #220]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80029ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f0:	4a36      	ldr	r2, [pc, #216]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe f870 	bl	8000adc <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a00:	f7fe f86c 	bl	8000adc <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1d5      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a12:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d036      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d019      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a25      	ldr	r2, [pc, #148]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe f84d 	bl	8000adc <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a46:	f7fe f849 	bl	8000adc <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1b2      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x49a>
 8002a64:	e018      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a72:	f7fe f833 	bl	8000adc <HAL_GetTick>
 8002a76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a7a:	f7fe f82f 	bl	8000adc <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e198      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_RCC_OscConfig+0x520>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8085 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_RCC_OscConfig+0x524>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x524>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe f813 	bl	8000adc <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab8:	e00c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe f80f 	bl	8000adc <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	; 0x64
 8002ac6:	d905      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e178      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad4:	4b96      	ldr	r3, [pc, #600]	; (8002d30 <HAL_RCC_OscConfig+0x784>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ec      	beq.n	8002aba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x54a>
 8002ae8:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a91      	ldr	r2, [pc, #580]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	e02d      	b.n	8002b52 <HAL_RCC_OscConfig+0x5a6>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x56c>
 8002afe:	4b8d      	ldr	r3, [pc, #564]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a8c      	ldr	r2, [pc, #560]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	4b8a      	ldr	r3, [pc, #552]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a89      	ldr	r2, [pc, #548]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	e01c      	b.n	8002b52 <HAL_RCC_OscConfig+0x5a6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d10c      	bne.n	8002b3a <HAL_RCC_OscConfig+0x58e>
 8002b20:	4b84      	ldr	r3, [pc, #528]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a83      	ldr	r2, [pc, #524]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	4b81      	ldr	r3, [pc, #516]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a80      	ldr	r2, [pc, #512]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	e00b      	b.n	8002b52 <HAL_RCC_OscConfig+0x5a6>
 8002b3a:	4b7e      	ldr	r3, [pc, #504]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a7d      	ldr	r2, [pc, #500]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	4b7b      	ldr	r3, [pc, #492]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a7a      	ldr	r2, [pc, #488]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d015      	beq.n	8002b86 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fd ffbf 	bl	8000adc <HAL_GetTick>
 8002b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fd ffbb 	bl	8000adc <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e122      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b78:	4b6e      	ldr	r3, [pc, #440]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ee      	beq.n	8002b62 <HAL_RCC_OscConfig+0x5b6>
 8002b84:	e014      	b.n	8002bb0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fd ffa9 	bl	8000adc <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fd ffa5 	bl	8000adc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e10c      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ba4:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ee      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8101 	beq.w	8002dbc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bba:	4b5e      	ldr	r3, [pc, #376]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bc2:	2b18      	cmp	r3, #24
 8002bc4:	f000 80bc 	beq.w	8002d40 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	f040 8095 	bne.w	8002cfc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fd ff7d 	bl	8000adc <HAL_GetTick>
 8002be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fd ff79 	bl	8000adc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0e2      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c08:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <HAL_RCC_OscConfig+0x78c>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	430a      	orrs	r2, r1
 8002c18:	4946      	ldr	r1, [pc, #280]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	628b      	str	r3, [r1, #40]	; 0x28
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	025b      	lsls	r3, r3, #9
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	3b01      	subs	r3, #1
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c4e:	4939      	ldr	r1, [pc, #228]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4a36      	ldr	r2, [pc, #216]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c60:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c64:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <HAL_RCC_OscConfig+0x790>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c6c:	00d2      	lsls	r2, r2, #3
 8002c6e:	4931      	ldr	r1, [pc, #196]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c74:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	f023 020c 	bic.w	r2, r3, #12
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	492c      	ldr	r1, [pc, #176]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c86:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f023 0202 	bic.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4928      	ldr	r1, [pc, #160]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c98:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cb0:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002cb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fd ff02 	bl	8000adc <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fd fefe 	bl	8000adc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e067      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x730>
 8002cfa:	e05f      	b.n	8002dbc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fd fee8 	bl	8000adc <HAL_GetTick>
 8002d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fd fee4 	bl	8000adc <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e04d      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <HAL_RCC_OscConfig+0x788>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x764>
 8002d2e:	e045      	b.n	8002dbc <HAL_RCC_OscConfig+0x810>
 8002d30:	58024800 	.word	0x58024800
 8002d34:	58024400 	.word	0x58024400
 8002d38:	fffffc0c 	.word	0xfffffc0c
 8002d3c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_RCC_OscConfig+0x81c>)
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_OscConfig+0x81c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d031      	beq.n	8002db8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 0203 	and.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d12a      	bne.n	8002db8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d122      	bne.n	8002db8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d11a      	bne.n	8002db8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0a5b      	lsrs	r3, r3, #9
 8002d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d111      	bne.n	8002db8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	0c1b      	lsrs	r3, r3, #16
 8002d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d108      	bne.n	8002db8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	0e1b      	lsrs	r3, r3, #24
 8002daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3730      	adds	r7, #48	; 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	58024400 	.word	0x58024400

08002dcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e19c      	b.n	800311a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b8a      	ldr	r3, [pc, #552]	; (800300c <HAL_RCC_ClockConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d910      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b87      	ldr	r3, [pc, #540]	; (800300c <HAL_RCC_ClockConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 020f 	bic.w	r2, r3, #15
 8002df6:	4985      	ldr	r1, [pc, #532]	; (800300c <HAL_RCC_ClockConfig+0x240>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b83      	ldr	r3, [pc, #524]	; (800300c <HAL_RCC_ClockConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e184      	b.n	800311a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	4b7b      	ldr	r3, [pc, #492]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d908      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e2c:	4b78      	ldr	r3, [pc, #480]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	4975      	ldr	r1, [pc, #468]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	4b70      	ldr	r3, [pc, #448]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d908      	bls.n	8002e6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	496a      	ldr	r1, [pc, #424]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	4b64      	ldr	r3, [pc, #400]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d908      	bls.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e88:	4b61      	ldr	r3, [pc, #388]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	495e      	ldr	r1, [pc, #376]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	4b59      	ldr	r3, [pc, #356]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d908      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002eb6:	4b56      	ldr	r3, [pc, #344]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	4953      	ldr	r1, [pc, #332]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d908      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f023 020f 	bic.w	r2, r3, #15
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4947      	ldr	r1, [pc, #284]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d055      	beq.n	8002fae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f02:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4940      	ldr	r1, [pc, #256]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d121      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0f6      	b.n	800311a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d115      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0ea      	b.n	800311a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0de      	b.n	800311a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0d6      	b.n	800311a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f023 0207 	bic.w	r2, r3, #7
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4925      	ldr	r1, [pc, #148]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fd fdad 	bl	8000adc <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f86:	f7fd fda9 	bl	8000adc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0be      	b.n	800311a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d1eb      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d208      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f023 020f 	bic.w	r2, r3, #15
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	490e      	ldr	r1, [pc, #56]	; (8003010 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_ClockConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d214      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_RCC_ClockConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 020f 	bic.w	r2, r3, #15
 8002ff2:	4906      	ldr	r1, [pc, #24]	; (800300c <HAL_RCC_ClockConfig+0x240>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b04      	ldr	r3, [pc, #16]	; (800300c <HAL_RCC_ClockConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e086      	b.n	800311a <HAL_RCC_ClockConfig+0x34e>
 800300c:	52002000 	.word	0x52002000
 8003010:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800302c:	429a      	cmp	r2, r3
 800302e:	d208      	bcs.n	8003042 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003030:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	4939      	ldr	r1, [pc, #228]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 800303e:	4313      	orrs	r3, r2
 8003040:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800305a:	429a      	cmp	r2, r3
 800305c:	d208      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	492e      	ldr	r1, [pc, #184]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 800306c:	4313      	orrs	r3, r2
 800306e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003088:	429a      	cmp	r2, r3
 800308a:	d208      	bcs.n	800309e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4922      	ldr	r1, [pc, #136]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 800309a:	4313      	orrs	r3, r2
 800309c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d010      	beq.n	80030cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d208      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	4917      	ldr	r1, [pc, #92]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030cc:	f000 f834 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	4912      	ldr	r1, [pc, #72]	; (8003128 <HAL_RCC_ClockConfig+0x35c>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_RCC_ClockConfig+0x358>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_RCC_ClockConfig+0x35c>)
 80030f4:	5cd3      	ldrb	r3, [r2, r3]
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	4a0a      	ldr	r2, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x360>)
 8003102:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003104:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x364>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x368>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fc9a 	bl	8000a48 <HAL_InitTick>
 8003114:	4603      	mov	r3, r0
 8003116:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
 8003128:	0800464c 	.word	0x0800464c
 800312c:	24000004 	.word	0x24000004
 8003130:	24000000 	.word	0x24000000
 8003134:	24000010 	.word	0x24000010

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313e:	4bb3      	ldr	r3, [pc, #716]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003146:	2b18      	cmp	r3, #24
 8003148:	f200 8155 	bhi.w	80033f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <HAL_RCC_GetSysClockFreq+0x1c>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	080031b9 	.word	0x080031b9
 8003158:	080033f7 	.word	0x080033f7
 800315c:	080033f7 	.word	0x080033f7
 8003160:	080033f7 	.word	0x080033f7
 8003164:	080033f7 	.word	0x080033f7
 8003168:	080033f7 	.word	0x080033f7
 800316c:	080033f7 	.word	0x080033f7
 8003170:	080033f7 	.word	0x080033f7
 8003174:	080031df 	.word	0x080031df
 8003178:	080033f7 	.word	0x080033f7
 800317c:	080033f7 	.word	0x080033f7
 8003180:	080033f7 	.word	0x080033f7
 8003184:	080033f7 	.word	0x080033f7
 8003188:	080033f7 	.word	0x080033f7
 800318c:	080033f7 	.word	0x080033f7
 8003190:	080033f7 	.word	0x080033f7
 8003194:	080031e5 	.word	0x080031e5
 8003198:	080033f7 	.word	0x080033f7
 800319c:	080033f7 	.word	0x080033f7
 80031a0:	080033f7 	.word	0x080033f7
 80031a4:	080033f7 	.word	0x080033f7
 80031a8:	080033f7 	.word	0x080033f7
 80031ac:	080033f7 	.word	0x080033f7
 80031b0:	080033f7 	.word	0x080033f7
 80031b4:	080031eb 	.word	0x080031eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b8:	4b94      	ldr	r3, [pc, #592]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031c4:	4b91      	ldr	r3, [pc, #580]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	08db      	lsrs	r3, r3, #3
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	4a90      	ldr	r2, [pc, #576]	; (8003410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031d6:	e111      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031d8:	4b8d      	ldr	r3, [pc, #564]	; (8003410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031da:	61bb      	str	r3, [r7, #24]
    break;
 80031dc:	e10e      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031de:	4b8d      	ldr	r3, [pc, #564]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031e0:	61bb      	str	r3, [r7, #24]
    break;
 80031e2:	e10b      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031e4:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031e6:	61bb      	str	r3, [r7, #24]
    break;
 80031e8:	e108      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031ea:	4b88      	ldr	r3, [pc, #544]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031f4:	4b85      	ldr	r3, [pc, #532]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003200:	4b82      	ldr	r3, [pc, #520]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800320a:	4b80      	ldr	r3, [pc, #512]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	08db      	lsrs	r3, r3, #3
 8003210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80e1 	beq.w	80033f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b02      	cmp	r3, #2
 8003232:	f000 8083 	beq.w	800333c <HAL_RCC_GetSysClockFreq+0x204>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b02      	cmp	r3, #2
 800323a:	f200 80a1 	bhi.w	8003380 <HAL_RCC_GetSysClockFreq+0x248>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x114>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d056      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800324a:	e099      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800324c:	4b6f      	ldr	r3, [pc, #444]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02d      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003258:	4b6c      	ldr	r3, [pc, #432]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	08db      	lsrs	r3, r3, #3
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	4a6b      	ldr	r2, [pc, #428]	; (8003410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
 8003268:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003282:	4b62      	ldr	r3, [pc, #392]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003292:	ed97 6a02 	vldr	s12, [r7, #8]
 8003296:	eddf 5a61 	vldr	s11, [pc, #388]	; 800341c <HAL_RCC_GetSysClockFreq+0x2e4>
 800329a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032b2:	e087      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003420 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c6:	4b51      	ldr	r3, [pc, #324]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800341c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032f6:	e065      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330a:	4b40      	ldr	r3, [pc, #256]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331a:	ed97 6a02 	vldr	s12, [r7, #8]
 800331e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800341c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800333a:	e043      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003428 <HAL_RCC_GetSysClockFreq+0x2f0>
 800334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334e:	4b2f      	ldr	r3, [pc, #188]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003362:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800341c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800337e:	e021      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2ec>
 800338e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800341c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	0a5b      	lsrs	r3, r3, #9
 80033ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ce:	3301      	adds	r3, #1
 80033d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80033e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e8:	ee17 3a90 	vmov	r3, s15
 80033ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033ee:	e005      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
    break;
 80033f4:	e002      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f8:	61bb      	str	r3, [r7, #24]
    break;
 80033fa:	bf00      	nop
  }

  return sysclockfreq;
 80033fc:	69bb      	ldr	r3, [r7, #24]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	58024400 	.word	0x58024400
 8003410:	03d09000 	.word	0x03d09000
 8003414:	003d0900 	.word	0x003d0900
 8003418:	007a1200 	.word	0x007a1200
 800341c:	46000000 	.word	0x46000000
 8003420:	4c742400 	.word	0x4c742400
 8003424:	4a742400 	.word	0x4a742400
 8003428:	4af42400 	.word	0x4af42400

0800342c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003438:	2300      	movs	r3, #0
 800343a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03f      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003450:	d02a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003452:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003456:	d824      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345c:	d018      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800345e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003462:	d81e      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346c:	d007      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800346e:	e018      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003470:	4bab      	ldr	r3, [pc, #684]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	4aaa      	ldr	r2, [pc, #680]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800347c:	e015      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f000 ff11 	bl	80042ac <RCCEx_PLL2_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800348e:	e00c      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3324      	adds	r3, #36	; 0x24
 8003494:	2102      	movs	r1, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f000 ffba 	bl	8004410 <RCCEx_PLL3_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034a0:	e003      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
      break;
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034b0:	4b9b      	ldr	r3, [pc, #620]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034bc:	4998      	ldr	r1, [pc, #608]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	650b      	str	r3, [r1, #80]	; 0x50
 80034c2:	e001      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d03d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d826      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	080034f9 	.word	0x080034f9
 80034e8:	08003507 	.word	0x08003507
 80034ec:	08003519 	.word	0x08003519
 80034f0:	08003531 	.word	0x08003531
 80034f4:	08003531 	.word	0x08003531
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f8:	4b89      	ldr	r3, [pc, #548]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	4a88      	ldr	r2, [pc, #544]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003502:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003504:	e015      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fecd 	bl	80042ac <RCCEx_PLL2_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003516:	e00c      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3324      	adds	r3, #36	; 0x24
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f000 ff76 	bl	8004410 <RCCEx_PLL3_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
      break;
 800352e:	e000      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003538:	4b79      	ldr	r3, [pc, #484]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	f023 0207 	bic.w	r2, r3, #7
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003544:	4976      	ldr	r1, [pc, #472]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	650b      	str	r3, [r1, #80]	; 0x50
 800354a:	e001      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003558:	2b00      	cmp	r3, #0
 800355a:	d042      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003564:	d02b      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356a:	d825      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800356c:	2bc0      	cmp	r3, #192	; 0xc0
 800356e:	d028      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003570:	2bc0      	cmp	r3, #192	; 0xc0
 8003572:	d821      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d016      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d81d      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d007      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003584:	e018      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003586:	4b66      	ldr	r3, [pc, #408]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	4a65      	ldr	r2, [pc, #404]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003592:	e017      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fe86 	bl	80042ac <RCCEx_PLL2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035a4:	e00e      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3324      	adds	r3, #36	; 0x24
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 ff2f 	bl	8004410 <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035b6:	e005      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	75fb      	strb	r3, [r7, #23]
      break;
 80035bc:	e002      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035ca:	4b55      	ldr	r3, [pc, #340]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4952      	ldr	r1, [pc, #328]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	650b      	str	r3, [r1, #80]	; 0x50
 80035dc:	e001      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d049      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f8:	d030      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035fe:	d82a      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003600:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003604:	d02c      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003606:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800360a:	d824      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800360c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003610:	d018      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003616:	d81e      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800361c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003620:	d007      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003622:	e018      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003624:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	4a3d      	ldr	r2, [pc, #244]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003630:	e017      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fe37 	bl	80042ac <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003642:	e00e      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3324      	adds	r3, #36	; 0x24
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fee0 	bl	8004410 <RCCEx_PLL3_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003654:	e005      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003676:	492a      	ldr	r1, [pc, #168]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	658b      	str	r3, [r1, #88]	; 0x58
 800367c:	e001      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368a:	2b00      	cmp	r3, #0
 800368c:	d04c      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003698:	d030      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800369a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800369e:	d82a      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036a4:	d02c      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80036a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036aa:	d824      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036b0:	d018      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80036b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036b6:	d81e      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c0:	d007      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036c2:	e018      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d0:	e017      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fde7 	bl	80042ac <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036e2:	e00e      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3324      	adds	r3, #36	; 0x24
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fe90 	bl	8004410 <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f4:	e005      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
      break;
 80036fa:	e002      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003716:	4902      	ldr	r1, [pc, #8]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003718:	4313      	orrs	r3, r2
 800371a:	658b      	str	r3, [r1, #88]	; 0x58
 800371c:	e004      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800371e:	bf00      	nop
 8003720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d032      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	2b30      	cmp	r3, #48	; 0x30
 800373a:	d01c      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800373c:	2b30      	cmp	r3, #48	; 0x30
 800373e:	d817      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003740:	2b20      	cmp	r3, #32
 8003742:	d00c      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003744:	2b20      	cmp	r3, #32
 8003746:	d813      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d016      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800374c:	2b10      	cmp	r3, #16
 800374e:	d10f      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4baf      	ldr	r3, [pc, #700]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4aae      	ldr	r2, [pc, #696]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800375c:	e00e      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fda1 	bl	80042ac <RCCEx_PLL2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800376e:	e005      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
      break;
 8003774:	e002      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800377a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003782:	4ba3      	ldr	r3, [pc, #652]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378e:	49a0      	ldr	r1, [pc, #640]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003794:	e001      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d047      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ae:	d030      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80037b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b4:	d82a      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037ba:	d02c      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80037bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037c0:	d824      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c6:	d018      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80037c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037cc:	d81e      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	d007      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80037d8:	e018      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037da:	4b8d      	ldr	r3, [pc, #564]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	4a8c      	ldr	r2, [pc, #560]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037e6:	e017      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fd5c 	bl	80042ac <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037f8:	e00e      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3324      	adds	r3, #36	; 0x24
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fe05 	bl	8004410 <RCCEx_PLL3_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800380a:	e005      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	75fb      	strb	r3, [r7, #23]
      break;
 8003810:	e002      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800381e:	4b7c      	ldr	r3, [pc, #496]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	4979      	ldr	r1, [pc, #484]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800382c:	4313      	orrs	r3, r2
 800382e:	650b      	str	r3, [r1, #80]	; 0x50
 8003830:	e001      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d049      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384a:	d02e      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800384c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003850:	d828      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003852:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003856:	d02a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800385c:	d822      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800385e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003862:	d026      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003864:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003868:	d81c      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800386a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800386e:	d010      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003874:	d816      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01d      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387e:	d111      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fd10 	bl	80042ac <RCCEx_PLL2_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003890:	e012      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3324      	adds	r3, #36	; 0x24
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fdb9 	bl	8004410 <RCCEx_PLL3_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038a2:	e009      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	75fb      	strb	r3, [r7, #23]
      break;
 80038a8:	e006      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038aa:	bf00      	nop
 80038ac:	e004      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038be:	4b54      	ldr	r3, [pc, #336]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ca:	4951      	ldr	r1, [pc, #324]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	650b      	str	r3, [r1, #80]	; 0x50
 80038d0:	e001      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d04b      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ec:	d02e      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80038ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f2:	d828      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d02a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d822      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003900:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003904:	d026      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800390a:	d81c      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800390c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003910:	d010      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003916:	d816      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01d      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800391c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003920:	d111      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	2101      	movs	r1, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fcbf 	bl	80042ac <RCCEx_PLL2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003932:	e012      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3324      	adds	r3, #36	; 0x24
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fd68 	bl	8004410 <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003944:	e009      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
      break;
 800394a:	e006      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800394c:	bf00      	nop
 800394e:	e004      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003950:	bf00      	nop
 8003952:	e002      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003960:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800396e:	4928      	ldr	r1, [pc, #160]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	658b      	str	r3, [r1, #88]	; 0x58
 8003974:	e001      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d02f      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398e:	d00e      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003994:	d814      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d015      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800399a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399e:	d10f      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039ac:	e00c      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2101      	movs	r1, #1
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fc79 	bl	80042ac <RCCEx_PLL2_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039be:	e003      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	75fb      	strb	r3, [r7, #23]
      break;
 80039c4:	e000      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80039c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039da:	490d      	ldr	r1, [pc, #52]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	650b      	str	r3, [r1, #80]	; 0x50
 80039e0:	e001      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d033      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d81c      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a3b 	.word	0x08003a3b
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a23 	.word	0x08003a23
 8003a0c:	08003a3b 	.word	0x08003a3b
 8003a10:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a14:	4bb8      	ldr	r3, [pc, #736]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	4ab7      	ldr	r2, [pc, #732]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a20:	e00c      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2102      	movs	r1, #2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fc3f 	bl	80042ac <RCCEx_PLL2_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a42:	4bad      	ldr	r3, [pc, #692]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	f023 0203 	bic.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	49aa      	ldr	r1, [pc, #680]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a54:	e001      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8086 	beq.w	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a68:	4ba4      	ldr	r3, [pc, #656]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4aa3      	ldr	r2, [pc, #652]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a74:	f7fd f832 	bl	8000adc <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7a:	e009      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fd f82e 	bl	8000adc <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d902      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	75fb      	strb	r3, [r7, #23]
        break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a90:	4b9a      	ldr	r3, [pc, #616]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ef      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d166      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003aa2:	4b95      	ldr	r3, [pc, #596]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aac:	4053      	eors	r3, r2
 8003aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab6:	4b90      	ldr	r3, [pc, #576]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac0:	4b8d      	ldr	r3, [pc, #564]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a8c      	ldr	r2, [pc, #560]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003acc:	4b8a      	ldr	r3, [pc, #552]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a89      	ldr	r2, [pc, #548]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ad8:	4a87      	ldr	r2, [pc, #540]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	d115      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fc fff7 	bl	8000adc <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003af0:	e00b      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fc fff3 	bl	8000adc <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d902      	bls.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	75fb      	strb	r3, [r7, #23]
            break;
 8003b08:	e005      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b0a:	4b7b      	ldr	r3, [pc, #492]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ed      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d126      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b2c:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b3a:	0919      	lsrs	r1, r3, #4
 8003b3c:	4b70      	ldr	r3, [pc, #448]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003b3e:	400b      	ands	r3, r1
 8003b40:	496d      	ldr	r1, [pc, #436]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	610b      	str	r3, [r1, #16]
 8003b46:	e005      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b48:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	4a6a      	ldr	r2, [pc, #424]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b52:	6113      	str	r3, [r2, #16]
 8003b54:	4b68      	ldr	r3, [pc, #416]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b62:	4965      	ldr	r1, [pc, #404]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	670b      	str	r3, [r1, #112]	; 0x70
 8003b68:	e004      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	75bb      	strb	r3, [r7, #22]
 8003b6e:	e001      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d07e      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b84:	2b28      	cmp	r3, #40	; 0x28
 8003b86:	d867      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003c5f 	.word	0x08003c5f
 8003b94:	08003c59 	.word	0x08003c59
 8003b98:	08003c59 	.word	0x08003c59
 8003b9c:	08003c59 	.word	0x08003c59
 8003ba0:	08003c59 	.word	0x08003c59
 8003ba4:	08003c59 	.word	0x08003c59
 8003ba8:	08003c59 	.word	0x08003c59
 8003bac:	08003c59 	.word	0x08003c59
 8003bb0:	08003c35 	.word	0x08003c35
 8003bb4:	08003c59 	.word	0x08003c59
 8003bb8:	08003c59 	.word	0x08003c59
 8003bbc:	08003c59 	.word	0x08003c59
 8003bc0:	08003c59 	.word	0x08003c59
 8003bc4:	08003c59 	.word	0x08003c59
 8003bc8:	08003c59 	.word	0x08003c59
 8003bcc:	08003c59 	.word	0x08003c59
 8003bd0:	08003c47 	.word	0x08003c47
 8003bd4:	08003c59 	.word	0x08003c59
 8003bd8:	08003c59 	.word	0x08003c59
 8003bdc:	08003c59 	.word	0x08003c59
 8003be0:	08003c59 	.word	0x08003c59
 8003be4:	08003c59 	.word	0x08003c59
 8003be8:	08003c59 	.word	0x08003c59
 8003bec:	08003c59 	.word	0x08003c59
 8003bf0:	08003c5f 	.word	0x08003c5f
 8003bf4:	08003c59 	.word	0x08003c59
 8003bf8:	08003c59 	.word	0x08003c59
 8003bfc:	08003c59 	.word	0x08003c59
 8003c00:	08003c59 	.word	0x08003c59
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003c59 	.word	0x08003c59
 8003c0c:	08003c59 	.word	0x08003c59
 8003c10:	08003c5f 	.word	0x08003c5f
 8003c14:	08003c59 	.word	0x08003c59
 8003c18:	08003c59 	.word	0x08003c59
 8003c1c:	08003c59 	.word	0x08003c59
 8003c20:	08003c59 	.word	0x08003c59
 8003c24:	08003c59 	.word	0x08003c59
 8003c28:	08003c59 	.word	0x08003c59
 8003c2c:	08003c59 	.word	0x08003c59
 8003c30:	08003c5f 	.word	0x08003c5f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fb36 	bl	80042ac <RCCEx_PLL2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c44:	e00c      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3324      	adds	r3, #36	; 0x24
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fbdf 	bl	8004410 <RCCEx_PLL3_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c56:	e003      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c72:	4921      	ldr	r1, [pc, #132]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	654b      	str	r3, [r1, #84]	; 0x54
 8003c78:	e001      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d03e      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d820      	bhi.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003c92:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003cdb 	.word	0x08003cdb
 8003c9c:	08003cb1 	.word	0x08003cb1
 8003ca0:	08003cc3 	.word	0x08003cc3
 8003ca4:	08003cdb 	.word	0x08003cdb
 8003ca8:	08003cdb 	.word	0x08003cdb
 8003cac:	08003cdb 	.word	0x08003cdb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 faf8 	bl	80042ac <RCCEx_PLL2_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cc0:	e00c      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3324      	adds	r3, #36	; 0x24
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fba1 	bl	8004410 <RCCEx_PLL3_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cd2:	e003      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd8:	e000      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d110      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	f023 0207 	bic.w	r2, r3, #7
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cee:	4902      	ldr	r1, [pc, #8]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	654b      	str	r3, [r1, #84]	; 0x54
 8003cf4:	e008      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003cf6:	bf00      	nop
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	58024800 	.word	0x58024800
 8003d00:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d039      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d820      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d67 	.word	0x08003d67
 8003d28:	08003d3d 	.word	0x08003d3d
 8003d2c:	08003d4f 	.word	0x08003d4f
 8003d30:	08003d67 	.word	0x08003d67
 8003d34:	08003d67 	.word	0x08003d67
 8003d38:	08003d67 	.word	0x08003d67
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fab2 	bl	80042ac <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d4c:	e00c      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3324      	adds	r3, #36	; 0x24
 8003d52:	2101      	movs	r1, #1
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fb5b 	bl	8004410 <RCCEx_PLL3_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d5e:	e003      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
      break;
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d6e:	4bb7      	ldr	r3, [pc, #732]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f023 0207 	bic.w	r2, r3, #7
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	49b3      	ldr	r1, [pc, #716]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	658b      	str	r3, [r1, #88]	; 0x58
 8003d82:	e001      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d04b      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9e:	d02e      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da4:	d828      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003daa:	d02a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d822      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db6:	d026      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003db8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dbc:	d81c      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc2:	d010      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc8:	d816      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01d      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dd2:	d111      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fa66 	bl	80042ac <RCCEx_PLL2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003de4:	e012      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3324      	adds	r3, #36	; 0x24
 8003dea:	2102      	movs	r1, #2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fb0f 	bl	8004410 <RCCEx_PLL3_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003df6:	e009      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e004      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e02:	bf00      	nop
 8003e04:	e002      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e12:	4b8e      	ldr	r3, [pc, #568]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e20:	498a      	ldr	r1, [pc, #552]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	654b      	str	r3, [r1, #84]	; 0x54
 8003e26:	e001      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d04b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e42:	d02e      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003e44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e48:	d828      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4e:	d02a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	d822      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e5a:	d026      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e60:	d81c      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e66:	d010      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e6c:	d816      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01d      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e76:	d111      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fa14 	bl	80042ac <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e88:	e012      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fabd 	bl	8004410 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e009      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	e006      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eb6:	4b65      	ldr	r3, [pc, #404]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec4:	4961      	ldr	r1, [pc, #388]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	658b      	str	r3, [r1, #88]	; 0x58
 8003eca:	e001      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d04b      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ee2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ee6:	d02e      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003ee8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eec:	d828      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef2:	d02a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef8:	d822      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003efa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003efe:	d026      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f04:	d81c      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f10:	d816      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01d      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1a:	d111      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f9c2 	bl	80042ac <RCCEx_PLL2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f2c:	e012      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3324      	adds	r3, #36	; 0x24
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fa6b 	bl	8004410 <RCCEx_PLL3_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f3e:	e009      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
      break;
 8003f44:	e006      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f46:	bf00      	nop
 8003f48:	e004      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f5a:	4b3c      	ldr	r3, [pc, #240]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f68:	4938      	ldr	r1, [pc, #224]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f6e:	e001      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3324      	adds	r3, #36	; 0x24
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fa3c 	bl	8004410 <RCCEx_PLL3_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003fa2:	4b2a      	ldr	r3, [pc, #168]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb0:	4926      	ldr	r1, [pc, #152]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fa1b 	bl	8004410 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff2:	4916      	ldr	r1, [pc, #88]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d036      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800400a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400e:	d01f      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004014:	d817      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401e:	d009      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004020:	e011      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f93f 	bl	80042ac <RCCEx_PLL2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004032:	e00e      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3324      	adds	r3, #36	; 0x24
 8004038:	2102      	movs	r1, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f9e8 	bl	8004410 <RCCEx_PLL3_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004044:	e005      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
      break;
 800404a:	e002      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800404c:	58024400 	.word	0x58024400
      break;
 8004050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004058:	4b93      	ldr	r3, [pc, #588]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004066:	4990      	ldr	r1, [pc, #576]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004068:	4313      	orrs	r3, r2
 800406a:	658b      	str	r3, [r1, #88]	; 0x58
 800406c:	e001      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d033      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004088:	d01c      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800408a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800408e:	d816      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004094:	d003      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800409a:	d007      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800409c:	e00f      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409e:	4b82      	ldr	r3, [pc, #520]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	4a81      	ldr	r2, [pc, #516]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80040aa:	e00c      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3324      	adds	r3, #36	; 0x24
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f9ac 	bl	8004410 <RCCEx_PLL3_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
      break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80040c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040cc:	4b76      	ldr	r3, [pc, #472]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040da:	4973      	ldr	r1, [pc, #460]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	654b      	str	r3, [r1, #84]	; 0x54
 80040e0:	e001      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d029      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80040fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fe:	d007      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004100:	e00f      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004102:	4b69      	ldr	r3, [pc, #420]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	4a68      	ldr	r2, [pc, #416]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800410e:	e00b      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	2102      	movs	r1, #2
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f8c8 	bl	80042ac <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
      break;
 8004126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800412e:	4b5e      	ldr	r3, [pc, #376]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	495b      	ldr	r1, [pc, #364]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800413c:	4313      	orrs	r3, r2
 800413e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004140:	e001      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3324      	adds	r3, #36	; 0x24
 8004156:	2102      	movs	r1, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f959 	bl	8004410 <RCCEx_PLL3_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d030      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417c:	d017      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800417e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004182:	d811      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d013      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800418a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418e:	d80b      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d010      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004198:	d106      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419a:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	4a42      	ldr	r2, [pc, #264]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80041a6:	e007      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      break;
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041be:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ca:	4937      	ldr	r1, [pc, #220]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	654b      	str	r3, [r1, #84]	; 0x54
 80041d0:	e001      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	492e      	ldr	r1, [pc, #184]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004200:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800420e:	4926      	ldr	r1, [pc, #152]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422c:	491e      	ldr	r1, [pc, #120]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800423e:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004244:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004248:	6113      	str	r3, [r2, #16]
 800424a:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004254:	4914      	ldr	r1, [pc, #80]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	da08      	bge.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426e:	490e      	ldr	r1, [pc, #56]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004270:	4313      	orrs	r3, r2
 8004272:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	4906      	ldr	r1, [pc, #24]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004294:	7dbb      	ldrb	r3, [r7, #22]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	58024400 	.word	0x58024400

080042ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042ba:	4b53      	ldr	r3, [pc, #332]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d101      	bne.n	80042ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e099      	b.n	80043fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042ca:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a4e      	ldr	r2, [pc, #312]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80042d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d6:	f7fc fc01 	bl	8000adc <HAL_GetTick>
 80042da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042de:	f7fc fbfd 	bl	8000adc <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e086      	b.n	80043fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042f0:	4b45      	ldr	r3, [pc, #276]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042fc:	4b42      	ldr	r3, [pc, #264]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	031b      	lsls	r3, r3, #12
 800430a:	493f      	ldr	r1, [pc, #252]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 800430c:	4313      	orrs	r3, r2
 800430e:	628b      	str	r3, [r1, #40]	; 0x28
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	3b01      	subs	r3, #1
 8004316:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	3b01      	subs	r3, #1
 8004320:	025b      	lsls	r3, r3, #9
 8004322:	b29b      	uxth	r3, r3
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	3b01      	subs	r3, #1
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	3b01      	subs	r3, #1
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004340:	4931      	ldr	r1, [pc, #196]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004346:	4b30      	ldr	r3, [pc, #192]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	492d      	ldr	r1, [pc, #180]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004358:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	f023 0220 	bic.w	r2, r3, #32
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	4928      	ldr	r1, [pc, #160]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800436a:	4b27      	ldr	r3, [pc, #156]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	4a26      	ldr	r2, [pc, #152]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 8004378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <RCCEx_PLL2_Config+0x160>)
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	69d2      	ldr	r2, [r2, #28]
 8004382:	00d2      	lsls	r2, r2, #3
 8004384:	4920      	ldr	r1, [pc, #128]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800438a:	4b1f      	ldr	r3, [pc, #124]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	4a19      	ldr	r2, [pc, #100]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80043a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043a8:	e00f      	b.n	80043ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d106      	bne.n	80043be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80043b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043bc:	e005      	b.n	80043ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	4a11      	ldr	r2, [pc, #68]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80043c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80043d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d6:	f7fc fb81 	bl	8000adc <HAL_GetTick>
 80043da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043dc:	e008      	b.n	80043f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043de:	f7fc fb7d 	bl	8000adc <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e006      	b.n	80043fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <RCCEx_PLL2_Config+0x15c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	58024400 	.word	0x58024400
 800440c:	ffff0007 	.word	0xffff0007

08004410 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800441e:	4b53      	ldr	r3, [pc, #332]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b03      	cmp	r3, #3
 8004428:	d101      	bne.n	800442e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e099      	b.n	8004562 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800442e:	4b4f      	ldr	r3, [pc, #316]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a4e      	ldr	r2, [pc, #312]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443a:	f7fc fb4f 	bl	8000adc <HAL_GetTick>
 800443e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004440:	e008      	b.n	8004454 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004442:	f7fc fb4b 	bl	8000adc <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e086      	b.n	8004562 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004454:	4b45      	ldr	r3, [pc, #276]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004460:	4b42      	ldr	r3, [pc, #264]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	051b      	lsls	r3, r3, #20
 800446e:	493f      	ldr	r1, [pc, #252]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004470:	4313      	orrs	r3, r2
 8004472:	628b      	str	r3, [r1, #40]	; 0x28
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	3b01      	subs	r3, #1
 800447a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	3b01      	subs	r3, #1
 8004484:	025b      	lsls	r3, r3, #9
 8004486:	b29b      	uxth	r3, r3
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	3b01      	subs	r3, #1
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	3b01      	subs	r3, #1
 800449e:	061b      	lsls	r3, r3, #24
 80044a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044a4:	4931      	ldr	r1, [pc, #196]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044aa:	4b30      	ldr	r3, [pc, #192]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	492d      	ldr	r1, [pc, #180]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044bc:	4b2b      	ldr	r3, [pc, #172]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	4928      	ldr	r1, [pc, #160]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044ce:	4b27      	ldr	r3, [pc, #156]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	4a26      	ldr	r2, [pc, #152]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044da:	4b24      	ldr	r3, [pc, #144]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <RCCEx_PLL3_Config+0x160>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	69d2      	ldr	r2, [r2, #28]
 80044e6:	00d2      	lsls	r2, r2, #3
 80044e8:	4920      	ldr	r1, [pc, #128]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044ee:	4b1f      	ldr	r3, [pc, #124]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	4a1e      	ldr	r2, [pc, #120]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004500:	4b1a      	ldr	r3, [pc, #104]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800450a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800450c:	e00f      	b.n	800452e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d106      	bne.n	8004522 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4a14      	ldr	r2, [pc, #80]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 800451a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800451e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004520:	e005      	b.n	800452e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	4a11      	ldr	r2, [pc, #68]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a0e      	ldr	r2, [pc, #56]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453a:	f7fc facf 	bl	8000adc <HAL_GetTick>
 800453e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004540:	e008      	b.n	8004554 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004542:	f7fc facb 	bl	8000adc <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e006      	b.n	8004562 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <RCCEx_PLL3_Config+0x15c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	58024400 	.word	0x58024400
 8004570:	ffff0007 	.word	0xffff0007

08004574 <__libc_init_array>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4d0d      	ldr	r5, [pc, #52]	; (80045ac <__libc_init_array+0x38>)
 8004578:	4c0d      	ldr	r4, [pc, #52]	; (80045b0 <__libc_init_array+0x3c>)
 800457a:	1b64      	subs	r4, r4, r5
 800457c:	10a4      	asrs	r4, r4, #2
 800457e:	2600      	movs	r6, #0
 8004580:	42a6      	cmp	r6, r4
 8004582:	d109      	bne.n	8004598 <__libc_init_array+0x24>
 8004584:	4d0b      	ldr	r5, [pc, #44]	; (80045b4 <__libc_init_array+0x40>)
 8004586:	4c0c      	ldr	r4, [pc, #48]	; (80045b8 <__libc_init_array+0x44>)
 8004588:	f000 f82e 	bl	80045e8 <_init>
 800458c:	1b64      	subs	r4, r4, r5
 800458e:	10a4      	asrs	r4, r4, #2
 8004590:	2600      	movs	r6, #0
 8004592:	42a6      	cmp	r6, r4
 8004594:	d105      	bne.n	80045a2 <__libc_init_array+0x2e>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	f855 3b04 	ldr.w	r3, [r5], #4
 800459c:	4798      	blx	r3
 800459e:	3601      	adds	r6, #1
 80045a0:	e7ee      	b.n	8004580 <__libc_init_array+0xc>
 80045a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a6:	4798      	blx	r3
 80045a8:	3601      	adds	r6, #1
 80045aa:	e7f2      	b.n	8004592 <__libc_init_array+0x1e>
 80045ac:	0800466c 	.word	0x0800466c
 80045b0:	0800466c 	.word	0x0800466c
 80045b4:	0800466c 	.word	0x0800466c
 80045b8:	08004670 	.word	0x08004670

080045bc <memcpy>:
 80045bc:	440a      	add	r2, r1
 80045be:	4291      	cmp	r1, r2
 80045c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045c4:	d100      	bne.n	80045c8 <memcpy+0xc>
 80045c6:	4770      	bx	lr
 80045c8:	b510      	push	{r4, lr}
 80045ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045d2:	4291      	cmp	r1, r2
 80045d4:	d1f9      	bne.n	80045ca <memcpy+0xe>
 80045d6:	bd10      	pop	{r4, pc}

080045d8 <memset>:
 80045d8:	4402      	add	r2, r0
 80045da:	4603      	mov	r3, r0
 80045dc:	4293      	cmp	r3, r2
 80045de:	d100      	bne.n	80045e2 <memset+0xa>
 80045e0:	4770      	bx	lr
 80045e2:	f803 1b01 	strb.w	r1, [r3], #1
 80045e6:	e7f9      	b.n	80045dc <memset+0x4>

080045e8 <_init>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr

080045f4 <_fini>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr
